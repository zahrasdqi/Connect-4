import numpy as np
def create_board():
    board=np.zros((6.7))
    return board

def print_board(board):
    print(board)

def is_valid_move(board,column):
    return board[0][column]==0

def make_move(board,column,player):
    for row in range(5,-1,-1):
        if board[row][column]==0:
            board[row][column]=player
            break

def check_winner(board):
    for row in range(6):
        for column in range(4):
            if board[row][column]!=0 and board[row][column]==board[row][column+1]==board[row][column+2]==board[row][column+3]:
                return board[row][column]
            
    for row in range(7):
        for column in range(3):
            if board[row][column]!=0 and board[row][column]==board[row+1][column]==board[row+2][column]==board[row+3][column]:
                return board[row][column]     
            
    for row in range(3):
        for column in range(4):
            if board[row][column]!=0 and board[row][column]==board[row+1][column+1]==board[row+2][column+2]==board[row+3][column+3]:
                return board[row][column]
            
    for row in range(3,6):
        for column in range(4):
            if board[row][column]!=0 and board[row][column]==board[row-1][column+1]==board[row-2][column+2]==board[row-3][column+3]:
                return board[row][column]
            
    return 0

def play_game():
    board=create_board()
    current_player=1

    while True:
        print_board(board)
        column=int(input(f"Player{current_player},choose a column:"))
        if not is_valid_move(board,column):
            print("invalid move")
            continue
        make_move(board,column,current_player)

        winner=check_winner(board)
        if winner!=0:
            print_board(board)
            print(f"Playe{winner} wins")
            break

        current_player=3-current_player
        play_game()